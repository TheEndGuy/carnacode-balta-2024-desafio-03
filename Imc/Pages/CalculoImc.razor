@page "/"
@rendermode InteractiveAuto
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

@using System.ComponentModel.DataAnnotations

<PageTitle>Cálculo do IMC</PageTitle>

<div class="main-container">
    <h1> Cálculo de IMC </h1>
    
    <EditForm Model="Model"  OnValidSubmit="Submit"  FormName="CalculoImc">
        <DataAnnotationsValidator/>
        <ValidationSummary/>
        
        <div class="input-container">
            <InputNumber class="number-select-style" type="number" placeholder="Altura" @bind-Value="Model!.Height"/>
            <InputNumber class="number-select-style" type="number" placeholder="Peso" @bind-Value="Model!.Weight"/>
            
            <InputSelect class="font-style number-select-style" @bind-Value="Model.Gender">
                <option value="">Sexo</option>
                <option value="Masculino">Masculino</option>
                <option value="Feminino">Feminino</option>
                <option value="Outro">Outro</option>
            </InputSelect>

            <label style="font-size: 14px; color: rgba(0, 0, 0, 0.7);">
                <InputCheckbox style="margin-right: 2%;" @bind-Value="Model.IsOldPerson"/>
                Eu tenho 65 anos ou mais
            </label>
        </div>
        
        @if (ImcCreated)
        {
            <div style="display: flex; justify-content: center">
                <div class="alert">
                    <i style="margin-right: 5px">&#9989;</i>
                    <span class="message-text"><strong>Sucesso:</strong> Seu IMC é @Model.CalcularImc().</span>
                </div>
            </div>
        }
        
        @if (MostrarDetalhes)
        {
            <div style="display: flex; justify-content: center">
                <div class="details">
                    <i style="margin-right: 5px">&#128276;</i>
                    <span class="message-text"><strong>Funcionamento:</strong> Aponta níveis de magreza e obesidade, que são usados para nortear o trabalho de profissionais de saúde e de educadores físicos.</span>
                </div>
            </div>
        }

        <div class="button-container">
            <button class="button-calc" type="submit">Calcular meu IMC</button>
        </div>
    </EditForm>
    
    <div class="button-container">
        <button @onclick="MostrarDetalhesSubmit" class="button-info">Entenda o cálculo</button>
    </div>
</div>

@code {
    public PersonInformation? Model { get; set; } = new();
    private bool ImcCreated { get; set; }
    private bool MostrarDetalhes { get; set; }

    private async Task Submit()
    {
        var historico = new Historico.HistoryItem()
        {
            Imc = Model!.CalcularImc(),
            CreatedAt = DateTime.Now
        };
        
        if (await LocalStorage.ContainKeyAsync("imc-data"))
        {
            var data = await LocalStorage.GetItemAsync<List<Historico.HistoryItem>>("imc-data");
            data!.Add(historico);
            
            await LocalStorage.SetItemAsync("imc-data", data);
        }
        else
        {
            await LocalStorage.SetItemAsync("imc-data", new List<Historico.HistoryItem>()
            {
                historico
            });
        }
        
        ImcCreated = true;
        await Task.Delay(5000);
        ImcCreated = false;
    }

    private void MostrarDetalhesSubmit()
    {
        MostrarDetalhes = true;
    }

    public class PersonInformation
    {
        [Required(ErrorMessage = "O campo Altura é obrigatório.")]
        [Range(1, 3, ErrorMessage = "Valor Inválido para o campo Altura.")]
        public float Height { get; set; }
        
        [Required(ErrorMessage = "O campo Peso é obrigatório.")]
        [Range(1, 500, ErrorMessage = "Valor Inválido para o  campo Peso.")]
        public float Weight { get; set; }
        
        [Required(ErrorMessage = "O campo Sexo é obrigatório.")]
        public GenderEnum? Gender { get; set; }
        
        public bool IsOldPerson { get; set; }

        public float CalcularImc()
        {
            return (float)Math.Round(Weight / (Height * Height), 1);
        }

    }

    public enum GenderEnum
    {
        Masculino,
        Feminino,
        Outro
    }
}